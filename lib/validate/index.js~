var mailer = require('../mailer');
module.exports.status = require('./status');

//permanent mail-related veriables
var SENDER = "The Ticket <system@the-ticket.com>";
var ADMIN = "omerozery@gmail.com";

/*****************
Validate Documents
******************/
exports.doc = function(doc, doctype, reply) {
	if(!doc) {
		reply[doctype] = "No Such " + doctype;
	}
	return reply;
}

/**********************
Validate Payment Method
***********************/
exports.paymentMethod = function(payBy, reply) {
	if(payBy != 'paypal' && payBy != 'stripe') {
		reply.payBy = "Unkown Payment Method";		
	}
	return reply;
}

/**********************
Validate Ticket Pointer
***********************/
exports.ticketP = function(event, ticketP, reply) {
	if(!ticketP || !event.sub_events[ticketP[0]] || !event.sub_events[ticketP[0]].tickets[ticketP[1]]) {
		reply.ticket = "Invalid Ticket Pointer";
	}
	return reply;
}

/*********************
Validate email address
**********************/
exports.email = function(email, reply) {
	if(email == undefined) {
		reply.email = "Undefined email";
		return reply;
	}
	if(!email.toString().match(/^(([^<>()[\]\\.,;:\s@\)"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/i)) {
		reply.email = "Email is incorrect";
  }
	return reply;
}

/****************
Validate quantity
*****************/
exports.quantity = function(quantity, maxTickets, reply) {
	if(quantity == undefined) {
		reply.quantity = "Undefined quantity";
		return reply;
	}
	if(parseInt(quantity) != quantity || quantity <= 0 || quantity > maxTickets) {
		reply.quantity = "Invalid number of tickets";
	}
	return reply;
}

/*********************
Validate random fields
**********************/
//fixed Variable for maximum chars allowed
var MULTILINE_MAX_CHARS = 500;
var MAX_CHARS = 50;

//local function for for selectbox's values validation
function validateSelectbox (selectOptions, option, formField) {
	if(selectOptions.length == option) {
		return false;
	} else {
		return (selectOptions[option] == formField || validateSelectbox(selectOptions, option+1, formField))
	}
}

exports.fields = function(formFields, eventFields, reply) {

	errorFields = {};
	for(var field = 0 ; field < eventFields.length ; field++) {

		if(formFields[field] == undefined) {
			errorFields[field] = "Undefined field";
		} else { 
			formFields[field] = formFields[field].toString(); 
			if(!formFields[field] && eventFields[field].mandatory) {
				errorFields[field] = "This field is required";
			} else if (formFields[field]) {
				//checks MAX chars allowed for multiline-text
				if(eventFields[field].type == 'multiline_text' && formFields[field].length > MULTILINE_MAX_CHARS) {
					errorFields[field] = "Maximum of " + MULTILINE_MAX_CHARS + " chars";
					continue;
				}
				//checks MAX chars allowed for non-multiline-text
				if(eventFields[field].type != 'multiline_text' && formFields[field].length > MAX_CHARS) {
					errorFields[field] = "Maximum of " + MAX_CHARS + " chars";
					continue;
				}
				//checks MAX chars allowed, set by admin
				if(eventFields[field].max_chars && eventFields[field].max_chars < formFields[field].length) {
					errorFields[field] = "Maximum of " + eventFields[field].max_chars + " chars is required";
					continue;
				}
				//checks MIN chars allowed, set by admin
				if(eventFields[field].min_chars && eventFields[field].min_chars > formFields[field].length) {
					errorFields[field] = "Minimum of " + eventFields[field].min_chars + " chars is required";
					continue;
				}
				//checks selectbox options for selectbox type fields
				if(eventFields[field].type == 'selectbox' && !validateSelectbox(eventFields[field].select_options, 0, formFields[field])) {
					errorFields[field] = "Selectbox invalid option";
					continue;
				}
				//checks for email type fields
				if(eventFields[field].type == 'email' && this.Email(formFields[field], {}).email) {
					errorFields[field] = "Email is incorrect";
					continue;
				}
				//checks for digits type fields
				if((eventFields[field].type == 'digits' || eventFields[field].type == 'phone') && !formFields[field].match(/^\d+$/)) {
					errorFields[field] = "Digits only";
					continue;
				}
				//checks for date type fields
				if(eventFields[field].type == 'date') {
					if(parseInt(formFields[field]) == formFields[field]) {
						if(eventFields[field].min_date && eventFields[field].min_date > formFields[field]) {
							errorFields[field] = "The minimum date is: " + new Date(eventFields[field].min_date);
							continue;
						}
						if(eventFields[field].max_date && eventFields[field].max_date < formFields[field]) {
							errorFields[field] = "The maximum date is: " + new Date(eventFields[field].max_date);
							continue;
						}
					} else {
						errorFields[field] = "Invalid date";
					}
				}
			}
		}
	}
  //if error fields is not empty pushes it to the reply json and changing the status to failed
  if(Object.keys(errorFields).length) {
		reply.fields = errorFields;
	}
	return reply;
}

/**************
Validate coupon
***************/
exports.coupon = function(coupon, quantity, ticketP, reply) {

	//checks disabled / enabled
	if(coupon.disabled) {
		reply.coupon = "This coupon is disabled";
		return reply;
	}
	//checks coupon's expiry time
	var now = Math.floor(new Date().getTime()/1000);
	if(now >= coupon.timeout) {
		reply.coupon = "This coupon has expired";
		return reply;
	}
	//checks that the number of this coupon's uses doesn't exceed maximum uses allowed
	if(coupon.times_used >= coupon.maximum_uses) {
		reply.coupon = "This coupon ran out of uses";
		return reply;
	}

	//check whether it's possible to use this coupon 'quantity' times
	if(coupon.times_used+parseInt(quantity) > coupon.maximum_uses) {
		reply.coupon = "It is not possible to use this coupon " + quantity + " times";
		return reply;
	}
	//checks whether the coupon is bounded to the ticket or not
	var boundToTicket = false;
	for(var ticket = 0; ticket < coupon.related_tickets.length; ticket++) {
		if(coupon.related_tickets[ticket][0] == ticketP[0] && coupon.related_tickets[ticket][1] == ticketP[1]) {
			boundToTicket = true;
		}
	}
	if(!boundToTicket) {
		reply.coupon = "This coupon is not related to this ticket";
		return reply;
  }
	return reply;
}

/**************
Validate ticket
***************/
exports.ticket = function(ticket, quantity, reply) {

	//checks status
	if(ticket.status == 'hidden' || ticket.status == 'disabled') {
		reply.ticket = "This ticket is inactive";
		return reply;
	}
	//checks ticket's purchase range
	var now = Math.floor(new Date().getTime()/1000);
	if(now < ticket.sale_start || now >= ticket.sale_end ) {
		reply.ticket = "This ticket is unavailable at this time";
		return reply;
	}
	//checks that the number of this ticket's purchases doesn't exceed quantity in stock
	if(ticket.purchased >= ticket.quantity) {
		reply.ticket = "This ticket sold out";
		return reply;
	}
	//check whether its possible to purchase 'quantity' tickets
	if(ticket.purchased+parseInt(quantity) > ticket.quantity) {
		reply.ticket = "It is not possible to buy " + quantity + " tickets of the requested type";
		return reply;
	}
	return reply;
}

/******************
Validate Cell phone
*******************/
exports.cellphone = function(cellphone, reply) {
	if(cellphone == undefined) {
		reply.cellphone = "Undefined cellphone";
		return reply;
	}
	if(!cellphone.toString().match(/^\+[0-9]{12,13}$/)) {
		reply.cellphone = "Invalid cellphone number";
	}
	return reply;
}

/****************************************************
Validate Purchase Request Before Inserting to Databse
*****************************************************/
exports.purchase = function(purchaseReq, event, reply) {

	//defines general veriables
	var payBy = purchaseReq.payBy;
	var ticketP = purchaseReq.ticketP;
	var couponP = purchaseReq.couponP;
	var cellphone = purchaseReq.cellphone;
	var email = purchaseReq.email;
	var quantity = purchaseReq.quantity;
	var fieldsValues = purchaseReq.fieldsValues;
	var fieldsAttributes = event.fields;
	var maxTicketsPerPurchase = event.max_tickets_per_purchase;
	try {
		var ticket = event.sub_events[ticketP[0]].tickets[ticketP[1]];
		var coupon = event.coupons[couponP];
	} catch(err) {
		console.log(err);
	}

	//validate payment type
	reply = this.paymentMethod(payBy, reply);
	if(!reply.payBy) {

		//checking for valid ticket pointer
		reply = this.ticketP(event, ticketP, reply);
		if(!reply.ticket) {

			//validate quantity
			reply = this.quantity(quantity, maxTicketsPerPurchase, reply);
			if(!reply.quantity) {

				//validate coupon if exists (quantity needs to be checked byvalidateQuantity only and before using this function!
				if(coupon) {
					reply = this.coupon(coupon, quantity, ticketP, reply);
				}

				//validate cellphone if needed
				if(event.send_sms) {
					reply = this.cellphone(cellphone, reply);
				}

				//validate ticket (quantity needs to be checked by validateQuantity only and before using this function!
				reply = this.ticket(ticket, quantity, reply);

				//validate random fields
				reply = this.fields(fieldsValues, fieldsAttributes, reply);

				//validate email address
				reply = this.email(email, reply);
			}
		}
	}
	return reply;
}

/****************************************
Validate Authorize Request (capture/void)
*****************************************/
exports.authorize = function(purchase, reply) {

	//validate purchase status for authorize (capture/void)
	if(!this.status.isWFC(purchase.status)) {	
		reply.purchaseStatus = "Invalid purchase status for authorize (capture/void)";
	}
	return reply;
}

/**********************
Validate Refund Request
***********************/
exports.refund = function(refundReq, purchase, reply) {

	//validate quantity
	reply = this.quantity(refundReq.quantity, purchase.quantity.total, reply);

	//validate purchase status for refund
	if(!this.status.isCompleted(purchase.status) && !this.status.Isrefunded(purchase.status)) {
		reply.purchaseStatus = "Invalid purchase status for refund";
	}
	return reply;
}

